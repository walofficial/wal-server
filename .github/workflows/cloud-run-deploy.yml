name: Build and Deploy to Cloud Run

on:
  push:
    branches:
      - main
    paths-ignore:
      - "**.md"
      - "docs/**"
  workflow_dispatch:

env:
  PROJECT_ID: feisty-wall-394014
  REGION: europe-west3
  REPOSITORY: cloud-run-source-deploy
  SERVICE: wal-server

permissions:
  contents: "read"
  id-token: "write"

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 8
    outputs:
      image: ${{ steps.image_tag.outputs.image }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Debug OIDC Claims
        uses: github/actions-oidc-debugger@main
        with:
          audience: "${{ github.server_url }}/${{ github.repository_owner }}"

      - id: auth
        name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v3
        with:
          workload_identity_provider: projects/880207287631/locations/global/workloadIdentityPools/github/providers/wal-server

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure Docker Client
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet

      - name: Set Image Tag
        id: image_tag
        run: |
          IMAGE="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}"
          echo "image=$IMAGE" >> $GITHUB_OUTPUT

      - name: Build and Push Container
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: ${{ steps.image_tag.outputs.image }}
          cache-from: |
            type=registry,ref=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:buildcache
            type=registry,ref=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:latest
          cache-to: type=registry,ref=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:buildcache,mode=max
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
          build-args: |
            BUILDTIME=${{ fromJSON('["", "--build-arg=BUILDKIT_INLINE_CACHE=1"]')[github.ref == 'refs/heads/main'] }}

  deploy-staging:
    name: Deploy to Staging
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 4
    environment:
      name: staging
      url: ${{ steps.deploy_staging.outputs.url }}

    steps:
      - id: auth
        name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v3
        with:
          workload_identity_provider: projects/880207287631/locations/global/workloadIdentityPools/github/providers/wal-server

      - name: Deploy to Staging
        id: deploy_staging
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.SERVICE }}-staging
          region: ${{ env.REGION }}
          image: ${{ needs.build.outputs.image }}

  deploy-production:
    name: Deploy to Production
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 4
    environment:
      name: production
      url: ${{ steps.deploy_production.outputs.url }}

    steps:
      - id: auth
        name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v3
        with:
          workload_identity_provider: projects/880207287631/locations/global/workloadIdentityPools/github/providers/wal-server

      - name: Deploy to Production
        id: deploy_production
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.SERVICE }}
          region: ${{ env.REGION }}
          image: ${{ needs.build.outputs.image }}

      - name: Tag Image as Latest
        if: success()
        run: |
          gcloud artifacts docker tags add \
            ${{ needs.build.outputs.image }} \
            ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:latest
